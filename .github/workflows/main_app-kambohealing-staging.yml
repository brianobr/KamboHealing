# Docs for the Azure Web Apps Deploy action: https://github.com/Azure/webapps-deploy
# More GitHub Actions for Azure: https://github.com/Azure/actions

name: Build and deploy Node.js app to Azure Web App - app-kambohealing (dev)

on:
  push:
    branches:
      - 'dev/**'          # any branch starting with dev/
  workflow_dispatch:
    inputs:
      reason:
        description: 'Reason for manual deployment'
        required: false
        default: 'Manual deployment triggered'
        type: string

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Show trigger info
        run: |
          echo "Ref: ${{ github.ref }}"
          echo "Event: ${{ github.event_name }}"
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "Manual deployment triggered"
            echo "Reason: ${{ github.event.inputs.reason }}"
          fi

      - name: Set up Node.js version
        uses: actions/setup-node@v3
        with:
          node-version: '20.x'

      - name: Clean and install root dependencies
        run: |
          rm -f package-lock.json npm-shrinkwrap.json
          npm install --omit=dev --no-package-lock

      - name: Install and build client application
        run: |
          cd client
          rm -rf node_modules package-lock.json npm-shrinkwrap.json
          npm install --legacy-peer-deps
          NODE_OPTIONS="--max-old-space-size=4096" npm run build
          cd ..

      - name: Build server application
        run: |
          # Adjust this block to match your server build (mirrors staging workflow)
          rm -rf dist
          mkdir -p dist
          # Example: bundle / compile your server code
          # If you have a build step (tsc/webpack/esbuild), put it here.
          # For illustration we assume a prebuilt output named production.js
          # Replace these lines with the exact steps from your working staging workflow
          if [ -f server/build.sh ]; then bash server/build.sh; fi
          # Copy results into dist/
          # (Your staging workflow copies a production.js; keep parity)
          [ -f server/production.js ] && cp server/production.js dist/production.js

          # Copy client build into dist/public
          mkdir -p dist/public
          cp -r client/dist/* dist/public/ || true
          
          # Copy deployment files into dist
          cp package.json dist/
          [ -f package-lock.json ] && cp package-lock.json dist/ || true
          cp startup.sh dist/
          chmod +x dist/startup.sh

      - name: Verify build outputs
        run: |
          echo "Build verification:"
          ls -la dist || true
          ls -la dist/public || true
          [ -f dist/production.js ] && echo "Found dist/production.js" || echo "MISSING dist/production.js"

      - name: Create deployment package
        run: |
          rm -rf deployment release.zip
          mkdir -p deployment/server/public
          cp dist/production.js deployment/server/index.js
          cp -r dist/public/* deployment/server/public/ || true
          cp dist/package.json deployment/
          [ -f dist/package-lock.json ] && cp dist/package-lock.json deployment/ || true
          cp dist/startup.sh deployment/
          chmod +x deployment/startup.sh
          (cd deployment && zip -r ../release.zip .)

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: node-app
          path: release.zip

  deploy:
    runs-on: ubuntu-latest
    needs: build
    permissions:
      id-token: write
      contents: read

    steps:
      - name: Download artifact from build job
        uses: actions/download-artifact@v4
        with:
          name: node-app

      - name: Unzip artifact for deployment
        run: unzip -o release.zip

      - name: Login to Azure
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZUREAPPSERVICE_CLIENTID_6F2C19C323474B82956DC1CD50C5D388 }}
          tenant-id: ${{ secrets.AZUREAPPSERVICE_TENANTID_CDAFE703578D45ABA46274B6E7CDE3D3 }}
          subscription-id: ${{ secrets.AZUREAPPSERVICE_SUBSCRIPTIONID_1EE76121ECB44247BA4458D6EB7875CE }}

      - name: Deploy to Azure Web App (dev slot)
        uses: azure/webapps-deploy@v3
        with:
          app-name: 'app-kambohealing'
          slot-name: 'dev'             # <â€” key change for dev slot
          package: .
          startup-command: './startup.sh'
